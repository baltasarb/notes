package baltasarb.yama.messaging

import android.util.Log
import androidx.lifecycle.MutableLiveData
import com.google.firebase.firestore.*
import com.google.firebase.firestore.EventListener
import baltasarb.yama.YamaApplication
import java.util.*

class Chat(val app : YamaApplication) {

    private val TEAM_MESSAGES_PATH = "messages"
    val messages = MutableLiveData<LinkedList<ChatMessage>>()
    val TEAM_CHATS = "Team chats"
    val db = FirebaseFirestore.getInstance()

    fun loadTeamChat(teamId: String) {
        val teamChatsRef = db
            .collection(TEAM_CHATS)
            .document(teamId)
            .collection(TEAM_MESSAGES_PATH)

        getAllDocs(teamId)

        teamChatsRef.addSnapshotListener(EventListener<QuerySnapshot> { snapshots, e ->
            if (e != null) {
                Log.w("DOC_CHANGE", "Listen failed.", e)
                return@EventListener
            }

            for (docChange in snapshots!!.documentChanges) {
                onDocumentChangeCallback(docChange)
            }
        })
    }

    private fun addMessage(chatMessage: ChatMessage) {
        val currentMessages = messages.value ?: LinkedList()
        currentMessages.addLast(chatMessage)
        messages.value = currentMessages
    }

    private fun onDocumentChangeCallback(docChange: DocumentChange) {
        val chatMessage = docChange.document.toObject(ChatMessage::class.java)
        when (docChange.type) {
            DocumentChange.Type.ADDED -> {
                if(chatMessage.userId != app.userId)
                    addMessage(chatMessage)
            }
            DocumentChange.Type.MODIFIED -> {
                addMessage(chatMessage)
            }
            DocumentChange.Type.REMOVED -> Log.d("DOC_CHANGE", "Removed: " + docChange.document.data)
        }
    }

    private fun getAllDocs(teamId: String) {
        val teamChatsRef = db
            .collection(TEAM_CHATS)
            .document(teamId)
            .collection(TEAM_MESSAGES_PATH)

        teamChatsRef
            .orderBy("created")
            .get()
            .addOnSuccessListener { result ->
                val resultList = LinkedList<ChatMessage>()
                for (document in result) {
                    val chatMessage = document.toObject(ChatMessage::class.java)
                    resultList.add(chatMessage)
                    Log.d("GET_ALL", document.id + " => " + document.data)
                }
                messages.value = resultList
            }
            .addOnFailureListener { exception ->
                Log.d("GET_ALL", "Error getting documents: ", exception)
            }
    }

    fun post(chatMessage: ChatMessage, teamId: String) {
        db
            .collection(TEAM_CHATS)
            .document(teamId)
            .collection(TEAM_MESSAGES_PATH).document()                       //chatMessage id generated by the db
            .set(chatMessage) //chatMessage
    }
}